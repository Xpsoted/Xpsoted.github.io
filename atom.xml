<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SKDushow&#39;s Blog</title>
  
  
  <link href="https://xpsoted.github.io/atom.xml" rel="self"/>
  
  <link href="https://xpsoted.github.io/"/>
  <updated>2023-05-13T02:52:38.040Z</updated>
  <id>https://xpsoted.github.io/</id>
  
  <author>
    <name>SKDushow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HEXO任意主题下添加一言</title>
    <link href="https://xpsoted.github.io/post/%E6%95%99%E7%A8%8B/2023-05-13-HEXO%E4%BB%BB%E6%84%8F%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80.html"/>
    <id>https://xpsoted.github.io/post/%E6%95%99%E7%A8%8B/2023-05-13-HEXO%E4%BB%BB%E6%84%8F%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80.html</id>
    <published>2023-05-13T01:43:01.000Z</published>
    <updated>2023-05-13T02:52:38.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEXO任意主题下添加一言"><a href="#HEXO任意主题下添加一言" class="headerlink" title="HEXO任意主题下添加一言"></a>HEXO任意主题下添加一言</h1><h2 id="1-添加一言依赖"><a href="#1-添加一言依赖" class="headerlink" title="1.添加一言依赖"></a>1.添加一言依赖</h2><p>找到你主题的<code>layout.ejs</code></p><p>一般<code>layout.ejs</code>，存在于你主题根目录下<code>/layout/layout.ejs</code></p><p><img src="https://s2.loli.net/2023/05/13/SIycGXCjumOtTaV.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/13/SIycGXCjumOtTaV.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>拉倒结尾添加如下代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 一言API --></span><span class="token comment">&lt;!-- 现代写法，推荐 --></span><span class="token comment">&lt;!-- 兼容低版本浏览器 (包括 IE)，可移除 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--End--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> hitokoto <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hitokoto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hitokoto<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto <span class="token operator">+</span> <span class="token string">'——【'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">'】'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-添加一言"><a href="#2-添加一言" class="headerlink" title="2.添加一言"></a>2.添加一言</h2><p>我们现在可以将一言添加到任意位置，这个要根据具体情况分析了</p><p>各位可以先打开博客，并打开浏览器的开发者工具，查看我们想要添加一言部分的class id</p><p><img src="https://s2.loli.net/2023/05/13/RUTNths5xviGuj6.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/13/RUTNths5xviGuj6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>我现在根据开发者工具得知我想添加的class叫做motto，那么我们现在在vscode里面查找motto具体是在哪个文件</p><p><img src="https://s2.loli.net/2023/05/13/Osie8UbRvawjQ6F.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/13/Osie8UbRvawjQ6F.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>最后发现在<code>motto.ejs</code>里面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.motto.on &amp;&amp; page.current === 1) &#123; %>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= theme.motto.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          &lt;%= theme.motto.content %>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;% &#125; %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  &lt;%= theme.motto.content %>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改为如下代码（注:<code>theme.motto.content</code>就是座右铭下的文字，引用的是<code>config.yml</code>里面的文字，所以要修改这个）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hitokoto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  正在加载一言...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在<code>motto.ejs</code>就是如下的样子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.motto.on &amp;&amp; page.current === 1) &#123; %>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= theme.motto.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hitokoto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          正在加载一言...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;% &#125; %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们看看效果，原本显示这样子的</p><p><img src="https://s2.loli.net/2023/05/13/Wh7H9YgjMkN6XRt.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/13/Wh7H9YgjMkN6XRt.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>成为现在这样啦</p><p><img src="https://s2.loli.net/2023/05/13/i2ZPHKE3vdYWxbc.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/13/i2ZPHKE3vdYWxbc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HEXO任意主题下添加一言&quot;&gt;&lt;a href=&quot;#HEXO任意主题下添加一言&quot; class=&quot;headerlink&quot; title=&quot;HEXO任意主题下添加一言&quot;&gt;&lt;/a&gt;HEXO任意主题下添加一言&lt;/h1&gt;&lt;h2 id=&quot;1-添加一言依赖&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="教程" scheme="https://xpsoted.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://xpsoted.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>通过termux在手机上部署hexo到GitHub Pages</title>
    <link href="https://xpsoted.github.io/post/%E6%95%99%E7%A8%8B/%E9%80%9A%E8%BF%87termux%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E5%88%B0GitHub%20Pages.html"/>
    <id>https://xpsoted.github.io/post/%E6%95%99%E7%A8%8B/%E9%80%9A%E8%BF%87termux%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E5%88%B0GitHub%20Pages.html</id>
    <published>2023-05-07T05:00:00.000Z</published>
    <updated>2023-05-13T02:52:38.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过termux在手机上部署hexo到GitHub-Pages"><a href="#通过termux在手机上部署hexo到GitHub-Pages" class="headerlink" title="通过termux在手机上部署hexo到GitHub Pages"></a>通过termux在手机上部署hexo到GitHub Pages</h1><h2 id="0x010准备工作"><a href="#0x010准备工作" class="headerlink" title="0x010准备工作"></a>0x010准备工作</h2><h3 id="0x011安装软件"><a href="#0x011安装软件" class="headerlink" title="0x011安装软件"></a>0x011安装软件</h3><p><strong>1.<a href="https://f-droid.org/packages/com.termux/">Termux高级终端</a></strong></p><p>用于部署安装hexo等操作<br><img src="https://s2.loli.net/2023/05/06/G7YPWgNmDAFvrle.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/G7YPWgNmDAFvrle.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><strong>2.<a href="https://www.coolapk.com/apk/bin.mt.plus">MT管理器</a></strong></p><p>用于管理hexo相关文件，配置主题等操作<br><img src="https://s2.loli.net/2023/05/06/8BjzovRkGwyIf2J.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/8BjzovRkGwyIf2J.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><strong>3.<a href="https://f-droid.org/repo/net.gsantner.markor_145.apk">Markor</a></strong></p><p>作为markdown语法编辑器<br><img src="https://s2.loli.net/2023/05/06/wg9WltU3ifVuSCD.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/wg9WltU3ifVuSCD.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="0x012软件配置"><a href="#0x012软件配置" class="headerlink" title="0x012软件配置"></a>0x012软件配置</h3><p><strong>1.将termux软件包更新源换为国内源</strong></p><p>直接在高级终端当中输入如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.bfsu.edu.cn/termux/apt/termux-main stable main@'</span> <span class="token variable">$PREFIX</span>/etc/apt/sources.list <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现询问是否更新需要输入y并回车<br><img src="https://s2.loli.net/2023/05/06/mpx3rvP6OIiKceF.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/mpx3rvP6OIiKceF.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>2.安装Hexo所需的依赖</strong></p><p>Hexo需要安装git，openssl，nodejs，直接在Termux输入如下指令即可安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> nodejs openssh <span class="token function">git</span> <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/zDbFs8jygrpfWTQ.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/zDbFs8jygrpfWTQ.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><strong>3.将node.js软件源换为国内源</strong></p><p>输入如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/RCEnLsOoXmJl3TM.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/RCEnLsOoXmJl3TM.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="0x013注册GitHub账号"><a href="#0x013注册GitHub账号" class="headerlink" title="0x013注册GitHub账号"></a>0x013注册GitHub账号</h3><p>有的话可以忽略</p><h3 id="0x014设置GitHub的Ssh-key"><a href="#0x014设置GitHub的Ssh-key" class="headerlink" title="0x014设置GitHub的Ssh key"></a>0x014设置GitHub的Ssh key</h3><p><strong>1.生成ssh密钥</strong></p><p>在termux输入如下指令，将邮箱替换成你注册GitHub的邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"邮箱"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/jQxuH2BWqVrmsbR.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/jQxuH2BWqVrmsbR.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>在这里输入你ssh key要保存的路径，可以直接回车用默认的地址<br><img src="https://s2.loli.net/2023/05/06/rpJf9eFx6Ul3MgK.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/rpJf9eFx6Ul3MgK.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>在这里输入一个ssh key的密码，随便你自己设置就行，输入过程中没有显示，输入完成后直接回车<br><img src="https://s2.loli.net/2023/05/06/64WXnyBOrAihPUk.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/64WXnyBOrAihPUk.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>再输入一遍<br><img src="https://s2.loli.net/2023/05/06/G9wnXM7xjJktQWm.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/G9wnXM7xjJktQWm.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>创建完成后会出现如下的代码<br><img src="https://s2.loli.net/2023/05/06/kogqyuBtx48lvhn.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/kogqyuBtx48lvhn.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>2.获取创建的密钥</strong></p><p>如果你刚才和我一样用的是默认的路径，那么输入如下指令来查看密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /data/data/com.termux/files/home/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/48DibgSEnAHYRpo.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/48DibgSEnAHYRpo.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>将密钥复制下来</p><p><strong>3.将密钥添加到GitHub上去</strong></p><p>打开GitHub，找到设置页，然后点击如下按钮来添加ssh key<br><img src="https://s2.loli.net/2023/05/06/9HmBpXyzneYJcUG.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/9HmBpXyzneYJcUG.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>点击new sshkey<br><img src="https://s2.loli.net/2023/05/06/pfhYPAyE8c5qW4t.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/pfhYPAyE8c5qW4t.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>名字随便填一个，然后把刚才复制的ssh key粘贴下来，并点击绿色按钮<br><img src="https://s2.loli.net/2023/05/06/tlRjqcigPZX5IED.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/tlRjqcigPZX5IED.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>sshkey显示出来就表示添加成功<br><img src="https://s2.loli.net/2023/05/06/WkvZNXa2Ud6sewm.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/WkvZNXa2Ud6sewm.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>4.验证ssh</strong></p><p>打开termux输入如下指令  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当出现<br><code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code><br>输入yes<br><img src="https://s2.loli.net/2023/05/06/mIfgXpVcGObNs2J.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/mIfgXpVcGObNs2J.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp">输出<br><code>Hi xxx! You&#39;ve successfully authenticated...</code><br><img src="https://s2.loli.net/2023/05/06/1tVoSKLbyk2YWgl.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/1tVoSKLbyk2YWgl.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>时即连接成功。</p><h3 id="0x015-配置git相关"><a href="#0x015-配置git相关" class="headerlink" title="0x015 配置git相关"></a>0x015 配置git相关</h3><p><strong>1.创建GitHub pages仓库</strong></p><p>打开GitHub 主页，点击右上角头像旁边加号，找到New repository（创建储存库）点击它</p><p>下面的操作具体看图片<br><img src="https://s2.loli.net/2023/05/06/kvDamAYSGh9O6yU.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/kvDamAYSGh9O6yU.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>2.配置本机git信息</strong></p><p>打开termux输入如下指令<br><img src="https://s2.loli.net/2023/05/06/O7UAsdB4tNwY1LQ.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/O7UAsdB4tNwY1LQ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"您的GitHub 用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"您的GitHub 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x020-安装并在本地创建Hexo博客"><a href="#0x020-安装并在本地创建Hexo博客" class="headerlink" title="0x020 安装并在本地创建Hexo博客"></a>0x020 安装并在本地创建Hexo博客</h2><h3 id="0x021-安装Hexo本体"><a href="#0x021-安装Hexo本体" class="headerlink" title="0x021 安装Hexo本体"></a>0x021 安装Hexo本体</h3><p>输入如下指令即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/XcnoDqLyV6HtzTi.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/XcnoDqLyV6HtzTi.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="0x022-创建你的Hexo博客"><a href="#0x022-创建你的Hexo博客" class="headerlink" title="0x022 创建你的Hexo博客"></a>0x022 创建你的Hexo博客</h3><p><strong>1.初始化hexo</strong></p><p>以下是命令解释：</p><ul><li><code>mkdir 文件夹名字</code><br>创建文件夹命令 小白可以百度一下Linux常用命令进行更多的学习</li><li><code>cd 文件夹名字</code><br>进入该文件夹</li><li><code>hexo init</code><br>初始化hexo博客</li><li><code>hexo g</code><br>生成静态文件</li></ul><p>稍微解释下作用，就是在你手机根目录下创建了一个文件夹，这里面就是你的博客，并且进行了初始化操作</p><p>下面是一键命令,直接复制粘贴即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> hexo <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> hexo <span class="token operator">&amp;&amp;</span> hexo init <span class="token operator">&amp;&amp;</span> hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/32DwQvLArV18R9b.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/32DwQvLArV18R9b.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><strong>2.创建本地服务器确定博客已经成功建立</strong></p><p>termux输入<code>hexo s</code>来在手机上开启本地服务器确实博客已经正式可以使用</p><p>复制下面的网址到浏览器进行访问<br><img src="https://s2.loli.net/2023/05/06/fgalKZLimYeVhAb.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/fgalKZLimYeVhAb.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><img src="https://s2.loli.net/2023/05/06/TBVv3IHbRmgMNeL.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/TBVv3IHbRmgMNeL.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>现在hexo已经基本安装完成</p><p><strong>3.配置hexo-编写文章</strong></p><p><strong>创建编辑文章</strong><br>现在状态的hexo只有一个初始化时HelloWorld的文章，那么我们要想自己创建文章怎么办呢？</p><p>首先在termux按下ctrl+c来关闭我们开启的服务器<img src="https://s2.loli.net/2023/05/06/2EJlCHtZvBrIP9m.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/2EJlCHtZvBrIP9m.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>然后在终端下输入;其中文章标题是你可以自己其名字的<br><code>hexo new 文章标题</code></p><p>比如我创建了一个1234为标题的文章<br><img src="https://s2.loli.net/2023/05/06/zUg9viPM38S2oXr.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/zUg9viPM38S2oXr.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>编写文章</strong></p><ul><li>找到文章本体文件</li></ul><p>因为安卓12以后app没法直接访问data分区，所以我们不能直接编辑文章，需要将文章拷贝出来进行编辑，<br>hexo创建出来的的文章一般在termux目录的<code>~/hexo/source/_posts/</code>下<br>那么我们可以直接用指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/hexo/source/_posts/文章名称.md /sdcard/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中文章名称就是你的文章标题</p><p>比如我的文章标题是1234那么我就要用如下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/hexo/source/_posts/1234.md /sdcard/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/7YOsrk2gMptDhZ4.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/7YOsrk2gMptDhZ4.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>各位现在打开mt管理器就可以发现这个文件了<br><img src="https://s2.loli.net/2023/05/06/7UQm8542ApjMKvO.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/7UQm8542ApjMKvO.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><ul><li>编写文章</li></ul><p>hexo引擎是支持markdown语法和html5的，各位可以百度下如何正确使用这两种强大的语言</p><p>如果你本来就会这两种语言的话可以直接编辑这个文件，如果不会的话各位可以百度下markdown语法，基础的非常简单，实在懒得学可以用各种mark down编辑器，就跟word一样</p><p>这里具体碍于篇幅原因就不具体写<br><img src="https://s2.loli.net/2023/05/06/5TinRzGIZJk3N6A.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/5TinRzGIZJk3N6A.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><img src="https://s2.loli.net/2023/05/06/gSuUywaZh3ENv4o.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/gSuUywaZh3ENv4o.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><ul><li>把文章拷贝回hexo目录下</li></ul><p>其实和拷贝过来的流程一样，就是把具体路径掉各<br>先要删除在hexo目录下的空文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/hexo/source/_posts/文章名称.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把写好的文章拷贝回hdxo目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> /sdcard/文章名称.md ~/hexo/source/_posts/``<span class="token variable"><span class="token variable">`</span>  其中文章名称就是你的文章标题  <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https://s2.loli.net/2023/05/06/BzdV8YcrbqOHWy5.jpg<span class="token punctuation">)</span>* 将文章导入到hexo我们现在已经编写完成，那么导入到hexo里面还要分几部**第一步，清理hexo缓存**<span class="token variable">`</span></span>hexo clean<span class="token variable"><span class="token variable">`</span>  <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https://s2.loli.net/2023/05/06/YrKqMQHdVulzwB2.jpg<span class="token punctuation">)</span>  **第二步，生成网页**<span class="token variable">`</span></span>hexo g<span class="token variable"><span class="token variable">`</span>  <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https://s2.loli.net/2023/05/06/2UEt9vH8bgqBOfu.jpg<span class="token punctuation">)</span>  **第三步，启动本地服务器来查看效果**<span class="token variable">`</span></span>hexo s<span class="token variable"><span class="token variable">`</span>  <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https://s2.loli.net/2023/05/06/LBMlZYi9yKnp7cs.jpg<span class="token punctuation">)</span>最后打开本地服务器的网址看看效果是否和自己想的一样  <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https://s2.loli.net/2023/05/06/na5R1LPxWdIcF7p.jpg<span class="token punctuation">)</span>_**以上就是编写文章全部流程，各位可以多熟悉一下**_**4.配置hexo-配置信息修改**现在状态下的hexo虽然已经是基本可用状态了，但是其实还有很多配置需要修改才能达到最佳状态**当然修改信息的前提我们需要将配置文件拷贝出来**<span class="token variable">`</span></span>``shell<span class="token function">mv</span> ~/hexo/_config.yml /sdcard/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用mt管理器来编辑这个文件<br><img src="https://s2.loli.net/2023/05/06/pDcnr2W7RT6PwYE.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/pDcnr2W7RT6PwYE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>第一，个人&#x2F;站点信息修改</strong></p><p>主要要修改的是下图这一部分，下面我会把我每部分的作用描述下，并且把我改好的放上来供各位参考<br><img src="https://s2.loli.net/2023/05/06/NSxTnyu5fzZDdRA.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/NSxTnyu5fzZDdRA.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>每部分作用注释</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">Site<span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo 网站标题<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">description</span><span class="token punctuation">:</span> '' 个人信息描述<span class="token key atrule">keywords</span><span class="token punctuation">:</span> 搜索引擎关键词<span class="token key atrule">author</span><span class="token punctuation">:</span> John Doe 个人名称<span class="token key atrule">language</span><span class="token punctuation">:</span> en 语言<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我修改的</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">Site<span class="token key atrule">title</span><span class="token punctuation">:</span> SKDushow's Blog<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span><span class="token key atrule">author</span><span class="token punctuation">:</span> SKDushow<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二，GitHub上传相关信息</strong></p><p>先安装GitHubdeploy插件，打开termux输入如下指令</p><p><code>npm install hexo-deployer-git</code></p><p>然后打开mt管理器在配置文件的结尾<br><img src="https://s2.loli.net/2023/05/06/Em9Ry1WqPU7bC8k.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/Em9Ry1WqPU7bC8k.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>把下面这部分</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>改成</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">deploy：  <span class="token key atrule">type</span><span class="token punctuation">:</span>  git  <span class="token key atrule">repo</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/你的用户名/你的用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自此配置文件必要的修改已经完成，当然还有很多别的地方可以修改，这个就留给各位自己研究了</strong></p><p><strong>第三，将配置文件拷贝回hexo目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /sdcard/_config.yml ~/hexo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/sjCJh7TlgdL5N6F.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/sjCJh7TlgdL5N6F.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="0x023Hexo美化相关"><a href="#0x023Hexo美化相关" class="headerlink" title="0x023Hexo美化相关"></a>0x023Hexo美化相关</h3><p>现在虽然博客已经搭建完成，但是可能和大家看到很多别人的博客样貌上差别很大，这其中的原因是你没有安装主题</p><p>其实主题的教程不大好写，因为每个主题的安装方式可能都会有一定的差异，不过大体流程错不了，但是具体的细节各位要去看你安装的主题的相关文档</p><p>这里我用fluid主题作为例子，当然你也可以选择别的主题，hexo主题还是非常丰富的</p><p><strong>1.下载主题</strong></p><p>多数hexo主题是支持npm直接安装的，这里我直接拿这个举例子</p><p><strong>首先确定你现在所在的目录是hexo目录</strong></p><p>各位可以退出termux然后重新进入，输入<br><img src="https://s2.loli.net/2023/05/06/B5YlkLj2M9JeXNV.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/B5YlkLj2M9JeXNV.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保你在hexo目录下</p><p><strong>根据fluid官方文档通过npm下载fluid主题</strong></p><p>这是fluid主题官方文档给的安装方式</p><p><img src="https://s2.loli.net/2023/05/06/Gmb24D9KzO5SPUM.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/Gmb24D9KzO5SPUM.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>那我们可以直接输入指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-theme-fluid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/GhUVPYRrHxENiF6.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/GhUVPYRrHxENiF6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>2.安装主题</strong></p><p><strong>把主题配置文件拷贝到hexo根目录</strong></p><p>在termux下输入指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ~/hexo/node_modules/hexo-theme-主题名称/_config.yml  ~/hexo/_config.主题名称.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为我的主题叫做fluid，所以我输入的指令是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ~/hexo/node_modules/hexo-theme-fluid/_config.yml  ~/hexo/_config.fluid.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/06/Yc9JUiNfp18huog.jpg" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/Yc9JUiNfp18huog.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>关于主题配置文件的修改我这里就不多说了，因为每个主题的选项都不一样，这个需要根据你主题的文档来修改，一般这些文档都会都会非常详细</p><p>至于修改方式和上面的hexo配置文件修改方式大同小异，大家照葫芦画瓢即可</p><p><strong>3.设置fluid主题作为hexo主题</strong></p><p>在hexo目录下termux输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后大家按住termux的向下箭头到最底下找到</p><p><code>theme: landscape</code><br>这里<br><img src="https://s2.loli.net/2023/05/06/kOI8JrtaSBVEuYm.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/kOI8JrtaSBVEuYm.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>用上下左右键将光标移动到landspace后面，删除landspace改为fliud</p><p><img src="https://s2.loli.net/2023/05/06/ZAtu6P34rDVSdvh.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/ZAtu6P34rDVSdvh.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>注：这里的fliud单词也是根据你所使用的主题而定，因为我用的是fliud主题所以就改为fliud</strong></p><p>按下ctrl 再按在s键保存配置修改，显示这样即为成功</p><p><img src="https://s2.loli.net/2023/05/06/y8o4g7ZcmfpRh2l.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/y8o4g7ZcmfpRh2l.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>按下ctrl 再按下x 推出配置文件编辑</p><p><img src="https://s2.loli.net/2023/05/06/1Q8jlC7cpYvSUGw.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/1Q8jlC7cpYvSUGw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>3.启动本地服务器验证主题是否更换成功</strong></p><p>大家直接向上翻到<br><strong>0x022 创建你的Hexo博客</strong><br>那里的教程，步骤完全一样</p><p>不出意外的话大家应该可以看到主题已经更换成功<br><img src="https://s2.loli.net/2023/05/06/37uMTyU5DdBWKrp.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/06/37uMTyU5DdBWKrp.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="0x030-将hexo博客部署到GitHub-Pages"><a href="#0x030-将hexo博客部署到GitHub-Pages" class="headerlink" title="0x030 将hexo博客部署到GitHub Pages"></a>0x030 将hexo博客部署到GitHub Pages</h2><h3 id="0x031-安装git插件"><a href="#0x031-安装git插件" class="headerlink" title="0x031 安装git插件"></a>0x031 安装git插件</h3><p>Termux直接输入指令来安装git插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/07/wf7nJkYLqUr328p.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/07/wf7nJkYLqUr328p.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="0x032-将网站上传到GitHub"><a href="#0x032-将网站上传到GitHub" class="headerlink" title="0x032 将网站上传到GitHub"></a>0x032 将网站上传到GitHub</h3><p>termux直接输入来部署</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/07/jg8epCqHMfEGlkt.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/07/jg8epCqHMfEGlkt.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>在这里输入之前设定的ssh密码直接回车</p><p>出现如下结果就算部署成功了<br><img src="https://s2.loli.net/2023/05/07/3tdZpirAb5hPale.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/07/3tdZpirAb5hPale.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>最后各位可以打开</p><p>GitHub用户名.github.io</p><p>来查看自己是否部署成功</p><p>我的是<br>xpsoted.github.io<br><img src="https://s2.loli.net/2023/05/07/VZ63TNQjep8r7Lf.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/07/VZ63TNQjep8r7Lf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>至此大家就拥有自己的博客了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过termux在手机上部署hexo到GitHub-Pages&quot;&gt;&lt;a href=&quot;#通过termux在手机上部署hexo到GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;通过termux在手机上部署hexo到GitHub Page</summary>
      
    
    
    
    <category term="教程" scheme="https://xpsoted.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://xpsoted.github.io/tags/hexo/"/>
    
    <category term="termux" scheme="https://xpsoted.github.io/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>安卓编译环境配置</title>
    <link href="https://xpsoted.github.io/post/%E5%AE%89%E5%8D%93%E6%95%99%E7%A8%8B/%E5%AE%89%E5%8D%93%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html"/>
    <id>https://xpsoted.github.io/post/%E5%AE%89%E5%8D%93%E6%95%99%E7%A8%8B/%E5%AE%89%E5%8D%93%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</id>
    <published>2023-05-06T05:37:01.000Z</published>
    <updated>2023-05-13T02:52:38.031Z</updated>
    
    <content type="html"><![CDATA[<p>1.安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">bc</span> bison build-essential ccache <span class="token function">curl</span> flex g++-multilib gcc-multilib <span class="token function">git</span> gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush <span class="token function">rsync</span> schedtool squashfs-tools xsltproc <span class="token function">zip</span> zlib1g-dev python openjdk-8-jdk python python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装repo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/bin<span class="token function">curl</span> https://storage.googleapis.com/git-repo-downloads/repo <span class="token operator">></span> ~/bin/repo<span class="token function">sudo</span> <span class="token function">cp</span> ~/bin/repo /bin/repo<span class="token function">sudo</span> <span class="token function">chmod</span> a+x /bin/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.设置Git</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"xxx@xxx.com"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.安装依赖&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/sp</summary>
      
    
    
    
    <category term="安卓教程" scheme="https://xpsoted.github.io/categories/%E5%AE%89%E5%8D%93%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="android" scheme="https://xpsoted.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>0基础编写TWRP的Device Tree</title>
    <link href="https://xpsoted.github.io/post/%E5%AE%89%E5%8D%93%E6%95%99%E7%A8%8B/hello-world.html"/>
    <id>https://xpsoted.github.io/post/%E5%AE%89%E5%8D%93%E6%95%99%E7%A8%8B/hello-world.html</id>
    <published>2023-05-05T09:33:45.819Z</published>
    <updated>2023-05-13T02:52:38.033Z</updated>
    
    <content type="html"><![CDATA[<p>大家好诶，很多机型，尤其是新机器没有Twrp，很困难呐，但是呢由于vab或者啥的又导致没法移植，很多人呢想搞编译又苦于没电脑，没dt，所以呢我今天就教教各位如何用手写一个Twrp并在手机上进行编译操作，我相信我的教程人类都可以看懂，当然前提你要有一些刷机基础，而且我确信我在文中所用的专业名词都可以在百度里面搜到，所以你只要认真+细心一定可以学懂哦</p><h3 id="一，准备工作"><a href="#一，准备工作" class="headerlink" title="一，准备工作"></a>一，准备工作</h3><h5 id="1-了解你手机的分区（可以用【底层探测器】-来查看）"><a href="#1-了解你手机的分区（可以用【底层探测器】-来查看）" class="headerlink" title="1.了解你手机的分区（可以用【底层探测器】 来查看）"></a>1.了解你手机的分区（可以用<a href="http://www.coolapk.com/apk/net.imknown.android.forefrontinfo">【底层探测器】</a> 来查看）</h5><p><strong>第一种是有独立recovery分区</strong></p><p>这种分区包含System As Root分区（Sar）近几年小米三星都应该用的这种分区<br>A only分区，老机型偏多</p><p><strong>第二种是将recovery集成在boot分区里面</strong><br>A&#x2F;B分区（近几年新机，出场安卓8-10居多）<br>V-AB分区（出场安卓11机型居多）</p><p><strong>其他：</strong></p><p>要注意你的手机是否为动态分区，这点很重要跟后来的教程有关，一般v-ab都为动态分区，近两年新机大多都是动态分区</p><p><img src="https://s2.loli.net/2023/05/05/Y1FgztZ2jdphlVI.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/Y1FgztZ2jdphlVI.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><em>比如我的LGV50就为AB分区</em></p><h5 id="2-下载-x2F-提取你手机的官方刷机包，并解包"><a href="#2-下载-x2F-提取你手机的官方刷机包，并解包" class="headerlink" title="2.下载&#x2F;提取你手机的官方刷机包，并解包"></a>2.下载&#x2F;提取你手机的官方刷机包，并解包</h5><p><em>这点应该不会很难吧，各位但凡有刷机基础应该都可以办到</em></p><p><strong>下载好的官方包</strong><br>如果你是我上面说的第一种分区就提取<code>recovery.img</code><br>如果你是第二种就提取<code>boot.img</code><br>无官方包提取我推荐这个工具<a href="http://www.coolapk.com/apk/xzr.La.systemtoolbox">【镧·系统工具箱 2.0】</a></p><p><img src="https://s2.loli.net/2023/05/05/RpMl8T4hYz16oaZ.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/RpMl8T4hYz16oaZ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>现在就需要解包工具啦</strong><br>因为recovery.img和boot.img的解包方式是一样的，所以这两个解包工具是通用的，虽然我知道有很多很棒的免费解包工具，但是小白我还是推荐<a href="http://www.coolapk.com/apk/com.nightmare">【魇·工具箱 - 镜像工具】</a>，虽然收费但是有独立gui确实很方便，以下的教程我将用这个工具</p><p><strong>解包具体流程如下</strong></p><p>找到boot分解这个选择（就算你的是recovery也是可以用这个的）</p><p><img src="https://s2.loli.net/2023/05/05/w9W8rozEvHmAln1.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/w9W8rozEvHmAln1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>找到你提取的文件</p><p><img src="https://s2.loli.net/2023/05/05/iVsDpohC3qdkXT2.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/iVsDpohC3qdkXT2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>点击后稍等片刻，出现这张图片后解包成功</p><p><img src="https://s2.loli.net/2023/05/05/WvtV6rQSRqNcaDh.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/WvtV6rQSRqNcaDh.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>然后各位可以用<a href="http://www.coolapk.com/apk/bin.mt.plus">【MT管理器】</a>（手机上做开发很推荐）找到<br>&#x2F;data&#x2F;data&#x2F;com.nightmare&#x2F;files&#x2F;home&#x2F;AIK-mobile&#x2F;<br>目录里面就是你解包完成后的文件</p><p><img src="https://s2.loli.net/2023/05/05/Pun9LWXQtICzGdb.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/Pun9LWXQtICzGdb.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><em>现在我也给各位讲讲这里面的两个文件夹分别是</em><br><strong>第一个是RamDisk文件夹</strong><br>各位点开后大概能看出这是一套和安卓系统非常相向的文件结构，其实recovery也是基于Linux开发的，你解开的就好比是recovery的system分区，这个东西要保留好，我们一会要从中提取很多文件!但是切忌不要尝试移动这个文件夹，因为这个文件夹里面有硬链接<br><em><strong>如果你随意移动可能会导致你现在的系统崩溃</strong></em></p><p><img src="https://s2.loli.net/2023/05/05/SIUscanpRqxjMbW.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/SIUscanpRqxjMbW.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>第二个文件夹是split_img文件夹</strong><br>我在上面跟各位说过因为recovery也是基于Linux开发的一套系统<br>所以他也需要内核来进行启动，所以我们在这里面提取的就是你twrp要提取的内核啦</p><p><img src="https://s2.loli.net/2023/05/05/oVhDcsMSNdTZtOu.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/oVhDcsMSNdTZtOu.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="二，开始编写dt"><a href="#二，开始编写dt" class="headerlink" title="二，开始编写dt"></a>二，开始编写dt</h3><h5 id="1-关于dt和编译你所需要了解的"><a href="#1-关于dt和编译你所需要了解的" class="headerlink" title="1.关于dt和编译你所需要了解的"></a>1.关于dt和编译你所需要了解的</h5><p>可能很多人不知道twrp是如何来的，这里我就给各位讲讲<br>如果你用的是正统的twrp制造方法，那么简单来讲可以分为两大步<br>第一步，编写device tree<br>第二步，编译twrp</p><p><strong>twrp</strong>是一套完整的通用源码<br><strong>device tree</strong>呢就好比我们在里面写下关于我机器的各种特征，各种参数<br>然后twrp的源码来读取我们写的device tree，并根据我们写的参数来进行编译，生产你们平时用的twrp<br>而这步呢一般情况下就统称为编译</p><p>我们来制造twrp时呢大多数时候是可以不用碰twrp源码，我们只需要写device tree就可以，然后进行编译，所以这一步我就来教各位如何写twrp的dt（device tree）</p><h5 id="2-了解一个dt的文件结构"><a href="#2-了解一个dt的文件结构" class="headerlink" title="2.了解一个dt的文件结构"></a>2.了解一个dt的文件结构</h5><p><img src="https://s2.loli.net/2023/05/05/uyPfOhCAlqHNg2E.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/uyPfOhCAlqHNg2E.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>这是一个dt必须的组层，注意我图中划掉的部分是不必要的，现在我像各位详解下每个文件的作用<br><strong>(1)prebuilt文件夹</strong></p><p><img src="https://s2.loli.net/2023/05/05/ng4MqzORBPoV7uA.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/ng4MqzORBPoV7uA.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>这个文件夹的作用非常好理解，里面就是存放我们在第一步提取出来的内核<br>像这种提取出来的内核又名为预编译内核<br>预编译内核顾名思义就是已经预备编译好的内核<br>其中<code>image.gz</code>为内核本体<br>下面的<code>dtb.img</code>也是从刚才的第一步里面提取出来的<br>有部分机型可能会提取出来<code>dtbo</code>如果有的话也要放进来</p><p><img src="https://s2.loli.net/2023/05/05/8Xz3nbM4STq2p9B.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/8Xz3nbM4STq2p9B.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>这俩文件都是从提取出来的预编译部分重命名出来的</p><p>其中xxx-kernel就是<code>image.gz</code><br>xxx-dtb就是<code>dtb.img</code><br><strong>(2)root文件夹</strong><br>一般情况下都是要直接在这个文件夹里面直接新建个recovery文件夹，而这里面的文件来源都是在刚才RamDisk里面提取的init.xxx.rc，如果要修复解密要➕更多的东西，但是由于这里是小白教程就不多教了<br>提取的位置在RamDisk根目录下，提取所有的rc脚本过来</p><p><img src="https://s2.loli.net/2023/05/05/d2zqkwTUfyiFMmO.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/d2zqkwTUfyiFMmO.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>(3)剩下的mk文件都是各种机型参数和编译选择的填写位置</strong><br>我大概说下每个的作用，具体看下文的教程</p><p><code>Android.mk</code><br>用于声明你机型的机型代号，比如你的手机是小米5那么你的代号就是gemini</p><p><code>AndroidProduct.mk</code><br>用于告知twrp源码你写机型名称的那个mk的名字，这样才能让twrp读取到你的mk去编译</p><p><code>BoardConfig.mk</code><br>一般用于写机型的内核分区等配置文件</p><p><code>device.mk</code><br>如果你不是AB&#x2F;vab分区一般用不到这个，这个是写AB分区配置的</p><p><code>twrp_机型代号.mk/omni_机型代号.mk</code><br>这两个名字根据你twrp源码的安卓版本对应，如果你是安卓11就用twrp开头的，如果是以下的就用omni</p><p><code>recovery.fstab</code><br>这个文件是用来声明个个分区的挂载位置，也是提取自RamDisk</p><h5 id="3-真正开始手写dt"><a href="#3-真正开始手写dt" class="headerlink" title="3.真正开始手写dt"></a>3.真正开始手写dt</h5><p><strong>(1)利用mt管理器搭建一个dt框架</strong><br>首先新建个文件夹<br>将文件夹命名为<code>android_device_品牌英文名_机型代号</code><br>其实命名成啥都行，不过嘛，把这玩意命名成这种格式是一种标准，建议跟进下<br>然后按照我所列出的树状图来新建文件和文件夹</p><p><img src="https://s2.loli.net/2023/05/05/2U4xeMnoDfWkwpC.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/2U4xeMnoDfWkwpC.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>mt管理器点下面那排的➕号能调出来新建面板</p><p><img src="https://s2.loli.net/2023/05/05/1duJmktwhTn2bPI.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/1duJmktwhTn2bPI.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>建好了后差不多长这样</p><p><img src="https://s2.loli.net/2023/05/05/RrlUeFhOYQo3xwV.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/RrlUeFhOYQo3xwV.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>如果你自己对照后发现和我一样那么证明这步你成功啦<br><strong>(2)提取文件到dt里面</strong><br>咱们先从最简单的开始<code>recovery.fstab</code><br>一般这个文件会存在在<code>ramdisk/etc/recovery.fstab</code>，将这个文件放到dt根目录下</p><p><img src="https://s2.loli.net/2023/05/05/DZ2hxvBM6o5GquJ.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/DZ2hxvBM6o5GquJ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>如果没有这个文件可以去找你手机的<code>vendor/etc或system/etc下的fstab</code>文件（大于2k）并重命名为<code>recovery.fstab</code>拷贝到dt根目录下</p><p><img src="https://s2.loli.net/2023/05/05/d9CZUru3t5vsSq4.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/d9CZUru3t5vsSq4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>提取rc脚本到<code>root/recovery</code>，这些脚本直接从RamDisk根目录下找到并复制进去</p><p><img src="https://s2.loli.net/2023/05/05/WJmRkBY4dL6rhxN.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/WJmRkBY4dL6rhxN.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>标蓝部分均为rc脚本，就是xxx.rc这种</p><p>要拷贝的最后一个文件就是预编译内核啦，这个不在RamDisk而在split_img下，</p><p><img src="https://s2.loli.net/2023/05/05/NBCPp1ZAJFTWboX.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/NBCPp1ZAJFTWboX.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>将文件后有dtb的命名为dtb.img，将有kernel命名为image.gz放到dt的prebuilt目录下</p><p><img src="https://s2.loli.net/2023/05/05/fJZ42vtio5uqCL9.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/fJZ42vtio5uqCL9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>如果你的机型解出来的还有后面有-dtbo结尾的，将其命名为dtbo.img也放进来<br><strong>(3)编辑mk文件</strong><br>好了各位，这步要切入正题了，各位要认真观看反复观摩哟<br>先从<code>Android.mk</code>开始，这步是最简单的<br>首先你要知道你的机型代号，然后将我提供例子里面的代码复制下来，将蓝字部分改为你的机型代号，这步的含义很简单就是写下你的机型代号，所以我就不多讲了，上面# 后面的那些话都是注释，也建议各位保留下来，不要复制的时候删掉</p><p><img src="https://s2.loli.net/2023/05/05/jxSOBCw4hFiN1U6.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/jxSOBCw4hFiN1U6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><code>AndroidProducts.mk</code><br>同样也是将我提供的例子的代码复制下来，将蓝字部分改为你自己所命名的文件名称，这步不知道我在说啥的，往上面翻，看我画的树状图<br>这步的作用是在告诉twrp的源码你的文件名称</p><p><img src="https://s2.loli.net/2023/05/05/ZrSyfRAtzxcduXY.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/ZrSyfRAtzxcduXY.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><code>BoardConfig.mk</code><br>家人吗大的要来了，这步听我慢慢道来<br>从头开始看</p><p><img src="https://s2.loli.net/2023/05/05/HNV8vK4rd9POma2.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/HNV8vK4rd9POma2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>上面那些#开头的注释不用管<br>首先是</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">DEVICE_PATH <span class="token operator">:=</span> device/duoqin/k61v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其改成</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">DEVICE_PATH <span class="token operator">:=</span> device/品牌英文名称/机型代号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的作用是声明你dt所存放的位置</p><p><img src="https://s2.loli.net/2023/05/05/mBMbZda9SYtlexi.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/mBMbZda9SYtlexi.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>然后我标蓝的这块基本不用动，一个的作用是跳过依赖检查，还有个是声明CPU类型，两个都做了通用化处理，各位直接去我提供的例子里面复制就好</p><p><img src="https://s2.loli.net/2023/05/05/EPg273HSaXxZh9t.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/EPg273HSaXxZh9t.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>接着是</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">TARGET_OTA_ASSERT_DEVICE <span class="token operator">:=</span> k61v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">TARGET_OTA_ASSERT_DEVICE <span class="token operator">:=</span> 你的机型代号，注意空格<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的作用是验证刷机包的机型验证，有的时候你刷机碰到错误7就是因为这里的机型和你刷机包里面刷机脚本的机型对不上</p><p><img src="https://s2.loli.net/2023/05/05/bWN13dpTj4Pqh2e.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/bWN13dpTj4Pqh2e.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>这部分代码应该也不用动，也做了通用化处理，这步是告诉你twrp源码的分区文件格式</p><p><img src="https://s2.loli.net/2023/05/05/aBgukZ2VopDjqv5.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/aBgukZ2VopDjqv5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>然后就是内核部分啦，这部分改动的比较多<br>首先是内核的cmdline部分，你不懂啥意思？没关系跟着我做就好啦<br>首先找到刚才找预编译内核的那个目录，找到这个后面带cmdline的文件</p><p><img src="https://s2.loli.net/2023/05/05/EcfdGamyqOlBMTZ.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/EcfdGamyqOlBMTZ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>然后点击他选择编辑文本，将里面的话复制出来</p><p><img src="https://s2.loli.net/2023/05/05/KWdP8D1yLEFJk36.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/KWdP8D1yLEFJk36.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>然后将</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">BOARD_KERNEL_CMDLINE <span class="token operator">:=</span> bootopt<span class="token operator">=</span>64S3,32N2,64N2 buildvariant<span class="token operator">=</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">BOARD_KERNEL_CMDLINE <span class="token operator">:=</span> 你复制的，注意空格<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/05/LtuOAP9Yk3yRGno.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/LtuOAP9Yk3yRGno.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>下面这两个实在声明你预编译内核的位置，如果你还多个dtbo.img就在</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">TARGET_PREBUILT_DTB <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEVICE_PATH<span class="token punctuation">)</span>/prebuilt/dtb.img的下面多➕一行TARGET_PREBUILT_DTBOIMAGE <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEVICE_PATH<span class="token punctuation">)</span>/prebuilt/dtbo.img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再➕一行</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">BOARD_INCLUDE_RECOVERY_DTBO <span class="token operator">:=</span> true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里是声明你使用dtbo.img而且告诉twrp dtbo的位置<br>下面的部分不用管，直到这部分</p><p><img src="https://s2.loli.net/2023/05/05/mNHyBEWJRMd3jQe.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/mNHyBEWJRMd3jQe.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>将</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">TARGET_KERNEL_SOURCE <span class="token operator">:=</span> kernel/duoqin/k61v1_64_bspTARGET_KERNEL_CONFIG <span class="token operator">:=</span> k61v1_64_bsp_defconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">TARGET_KERNEL_SOURCE <span class="token operator">:=</span> kernel/厂家英文名/机型代号TARGET_KERNEL_CONFIG <span class="token operator">:=</span> 机型代号_defconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这步是在说明内核源码的位置<br>接下来是</p><p><img src="https://s2.loli.net/2023/05/05/42x1R8qIpQHshrG.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/42x1R8qIpQHshrG.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Platform</span>TARGET_BOARD_PLATFORM <span class="token operator">:=</span> mt6761<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将这里改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Platform</span>TARGET_BOARD_PLATFORM <span class="token operator">:=</span> 你的soc型号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>比如高通855就写sm8150，865就是sm8250<br>下面这部分不用动</p><p><img src="https://s2.loli.net/2023/05/05/GTKOkqDwVIgmPlz.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/GTKOkqDwVIgmPlz.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>这部分都是写了一些自适应分辨率和，默认启动logcat之类的参数，也是可以直接复制的<br>接下来这步就在不同的手机上有不同的区别了，首先确定你的手机是否为动态分区<br>如果是动态分区搞清楚整个super分区大小，并搞清楚整个super里面都包含哪些分区</p><p><img src="https://s2.loli.net/2023/05/05/1OAJqUISBikR4sw.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/1OAJqUISBikR4sw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>搞清楚后将</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Dynamic Partition</span>BOARD_SUPER_PARTITION_SIZE <span class="token operator">:=</span> 4294967296BOARD_SUPER_PARTITION_GROUPS <span class="token operator">:=</span> mainBOARD_MAIN_SIZE <span class="token operator">:=</span> 4294967296BOARD_MAIN_PARTITION_LIST <span class="token operator">:=</span> product vendor system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Dynamic Partition</span>BOARD_SUPER_PARTITION_SIZE <span class="token operator">:=</span> super分区大小（字节为单位）BOARD_SUPER_PARTITION_GROUPS <span class="token operator">:=</span> mainBOARD_MAIN_SIZE <span class="token operator">:=</span> super分区大小（字节为单位）BOARD_MAIN_PARTITION_LIST <span class="token operator">:=</span> 包含在super里面的分区名称，用空格间隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你不是动态分区直接把这些删掉就好<br>下面这部分基本可以照抄了</p><p><img src="https://s2.loli.net/2023/05/05/Zk2DhFXPQeRGuWU.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/Zk2DhFXPQeRGuWU.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>如果你的设备没有avb验证那么可以把</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># AVB</span>BOARD_AVB_ENABLE <span class="token operator">:=</span> trueBOARD_AVB_VBMETA_SYSTEM <span class="token operator">:=</span> system productBOARD_AVB_VBMETA_SYSTEM_KEY_PATH <span class="token operator">:=</span> external/avb/test/data/testkey_rsa2048.pemBOARD_AVB_VBMETA_SYSTEM_ALGORITHM <span class="token operator">:=</span> SHA256_RSA2048BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PLATFORM_SECURITY_PATCH_TIMESTAMP<span class="token punctuation">)</span>BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX_LOCATION <span class="token operator">:=</span> 1BOARD_AVB_VBMETA_VENDOR <span class="token operator">:=</span> vendorBOARD_AVB_VBMETA_VENDOR_KEY_PATH <span class="token operator">:=</span> external/avb/test/data/testkey_rsa2048.pemBOARD_AVB_VBMETA_VENDOR_ALGORITHM <span class="token operator">:=</span> SHA256_RSA2048BOARD_AVB_VBMETA_VENDOR_ROLLBACK_INDEX <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PLATFORM_SECURITY_PATCH_TIMESTAMP<span class="token punctuation">)</span>BOARD_AVB_VBMETA_VENDOR_ROLLBACK_INDEX_LOCATION <span class="token operator">:=</span> 2BOARD_AVB_RECOVERY_KEY_PATH <span class="token operator">:=</span> external/avb/test/data/testkey_rsa2048.pemBOARD_AVB_RECOVERY_ALGORITHM <span class="token operator">:=</span> SHA256_RSA2048BOARD_AVB_RECOVERY_ROLLBACK_INDEX <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PLATFORM_SECURITY_PATCH_TIMESTAMP<span class="token punctuation">)</span>BOARD_AVB_RECOVERY_ROLLBACK_INDEX_LOCATION <span class="token operator">:=</span> 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删掉<br>下一步确定你的手机是否有独立rec分区，这步我让你们在准备工作中做了，如果有rec分区</p><p><img src="https://s2.loli.net/2023/05/05/doBVCDp3XTjxIS1.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/doBVCDp3XTjxIS1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>我选中这部分删掉，如果是ab，vab啥的就留着，这部分是在告诉twrp他是不是要把twrp编译进boot分区<br>下一部分是</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Bootloader</span>TARGET_BOOTLOADER_BOARD_NAME <span class="token operator">:=</span> k61v1TARGET_NO_BOOTLOADER <span class="token operator">:=</span> trueTARGET_USES_UEFI <span class="token operator">:=</span> true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码啦<br>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Bootloader</span>TARGET_BOOTLOADER_BOARD_NAME <span class="token operator">:=</span> 机型代号TARGET_NO_BOOTLOADER <span class="token operator">:=</span> 有fastboot就写true没有就写falseTARGET_USES_UEFI <span class="token operator">:=</span> true（这行只有vab分区需要留下，如果不是就删掉）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/05/PpaDqM6bJgCkl9x.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/PpaDqM6bJgCkl9x.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>马上就到这个文件的最后一部啦<br>将</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Partitions</span>BOARD_FLASH_BLOCK_SIZE <span class="token operator">:=</span> 131072BOARD_BOOTIMAGE_PARTITION_SIZE <span class="token operator">:=</span> 33554432<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改成</p><pre class="line-numbers language-none"><code class="language-none"># PartitionsBOARD_FLASH_BLOCK_SIZE :&#x3D; 131072BOARD_BOOTIMAGE_PARTITION_SIZE :&#x3D; 你boot分区的大小，上面的数字是32mb，还是已字节为单位，如果你是我上面说的第一种分区就直接扬了这行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>device.mk</code><br>如果你既不是动态分区，也不是第二种分区，那么这步你就跳过，直接看下一步<br>如果你是vab分区那么直接把我这段复制过去</p><p><img src="https://s2.loli.net/2023/05/05/YGiEQ9Tf6pj8reP.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/YGiEQ9Tf6pj8reP.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>只需要改动</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LOCAL_PATH <span class="token operator">:=</span> device/duoqin/k61v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LOCAL_PATH <span class="token operator">:=</span> device/厂家英文名/机型代号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你只是动态分区，那么需要你保留我标蓝的部分</p><p><img src="https://s2.loli.net/2023/05/05/TkKgfu7CqL94eJE.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/TkKgfu7CqL94eJE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>其他全部扬掉<br>只需要改动</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LOCAL_PATH <span class="token operator">:=</span> device/duoqin/k61v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LOCAL_PATH <span class="token operator">:=</span> device/厂家英文名/机型代号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你不是动态分区只是ab分区<br>删掉我标蓝部分</p><p><img src="https://s2.loli.net/2023/05/05/fIHzZmu5DYbdrnJ.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/fIHzZmu5DYbdrnJ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>只需要改动</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LOCAL_PATH <span class="token operator">:=</span> device/duoqin/k61v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LOCAL_PATH <span class="token operator">:=</span> device/厂家英文名/机型代号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并将</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">AB_OTA_PARTITIONS <span class="token operator">+=</span> \boot \system \product \dtbo \vbmeta \vbmeta_system \vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改成你机器所存在的AB分区<br>最后一个是twrp_你机型代号.mk<br>这步很简单</p><p><img src="https://s2.loli.net/2023/05/05/U2dSEZhPK9sOtAR.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/U2dSEZhPK9sOtAR.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>改为</p><p><img src="https://s2.loli.net/2023/05/05/jZMNQ7xAFIlCo2J.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2023/05/05/jZMNQ7xAFIlCo2J.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><h3 id="三，编译"><a href="#三，编译" class="headerlink" title="三，编译"></a>三，编译</h3><p>这一步教程非常多，各位百度就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家好诶，很多机型，尤其是新机器没有Twrp，很困难呐，但是呢由于vab或者啥的又导致没法移植，很多人呢想搞编译又苦于没电脑，没dt，所以呢我今天就教教各位如何用手写一个Twrp并在手机上进行编译操作，我相信我的教程人类都可以看懂，当然前提你要有一些刷机基础，而且我确信我在</summary>
      
    
    
    
    <category term="安卓教程" scheme="https://xpsoted.github.io/categories/%E5%AE%89%E5%8D%93%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="twrp" scheme="https://xpsoted.github.io/tags/twrp/"/>
    
  </entry>
  
</feed>
